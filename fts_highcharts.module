<?php

/**
 * @file
 * Provides integration between the FTS API and Highcharts graphs.
 */


/**
 * Implements hook_bean_types_api_info().
 */
function fts_highcharts_bean_types_api_info() {
  return array('api' => 4);
}

/**
 * Implements hook_bean_types().
 */
function fts_highcharts_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'fts_highcharts') . '/plugins/bean';
  $plugins['fts_highcharts'] = array(
    'label' => t('FTS Funding Status'),
    'description' => t('Display Funding Status Charts using Highcharts.'),
    'handler' => array(
      'class' => 'FTSHighchartsBean',
      'parent' => 'bean',
    ),
    'path' => $plugin_path,
  );
  return $plugins;
}

function _fts_highcharts_options($id, $groupby = '', $type = '') {
  // Hack while we wait for a proper highcharts setting in the configuration
  variable_set('highcharts_exporting', 1);
  // Get latest FTS data
  $appeal = fts_api_get_appeal_with_funding($id, $groupby);
  $financed = (int)$appeal->funding->total;
  $not_financed = (int)$appeal->current_requirements - (int)$appeal->funding->total;
  $series = array();
  $categories = array();
  $data = array();
  $funding_data = array();
  if (!empty($groupby)) {
    $groups = $appeal->funding->grouping->group;
    foreach ($groups as $group) {
      if (is_string($group->type)) {
        $data[$group->type]['funding'] = (int)$group->amount;
      }
    }
    
    if ($groupby == 'cluster') {
      $data_clusters = array();
      $clusters = $appeal->clusters->Cluster;
      foreach ($clusters as $cluster) {
        if (!empty($cluster->name)) {
          if (!isset($data[$cluster->name]['funding'])) {
            $data[$cluster->name]['funding'] = 0;
          }
          $data[$cluster->name]['cluster'] = (int)$cluster->current_requirement - (int)$data[$cluster->name]['funding'];
          if ($data[$cluster->name]['cluster'] < 0) {
            $data[$cluster->name]['cluster'] = 0;
          }
        }
      }
    }
  }
  else {
    $funding_data[] = array('Financed', $financed);
    $funding_data[] = array('Not Financed', $not_financed);
  }
  
  uasort($data, "_fts_highcharts_sort_cluster");
  
  foreach ($data as $name => $values) {
    $funding_data[] = array($name, $values['funding']);
    if ($groupby == 'cluster') {
      $cluster_data[] = array($name, $values['cluster']);
    }
    $categories[] = $name;
  }
  
  if ($groupby == 'cluster') {
    $serie = new stdClass();
    $serie->name = t('Unmet requirements');
    $serie->data = $cluster_data;
    $serie->color = '#D3D3D3';
    $series[] = $serie;
  }
  
  $serie = new stdClass();
  $serie->name = t('Funding Status');
  $serie->data = $funding_data;
  $serie->color = '#3067BB';
  $series[] = $serie;
  
  $options = new stdClass();
  
  $options->xAxis->categories = $categories;
  
  // Chart
  $options->chart = (object)array(
    'renderTo' => 'container',
    'plotBackgroundColor' => NULL,
    'plotBorderWidth' => NULL,
    'plotShadow' => FALSE,
    'type' => $type,
  );
  
  // Colors
  $options->colors = array(
    '#3067BB',
    '#D3D3D3',
    '#58AE6E',
    '#D23646',
    '#C49C5B',
    '#A470B2'
  );
  
  // Title
  $options->title->text = $appeal->type.' '.$appeal->year.' '.t('for').' '.$appeal->country;
  
  // Plot options.
  $options->plotOptions->pie = (object)array(
    'allowPointSelect' => TRUE,
    'cursor' => 'pointer',
    'dataLabels' => array(
      'enabled' => FALSE,
    ),
    'showInLegend' => TRUE,
  );
  
  $options->plotOptions->series = (object)array('stacking' => 'normal');
  
  $options->series = $series;

  // Diable credits.
  $options->credits->enabled = FALSE;

  return $options;
}

function _fts_highcharts_sort_cluster($a, $b) {
  $a_total = $a['funding'] + $a['cluster'];
  $b_total = $b['funding'] + $b['cluster'];
  if ($a_total == $b_total) {
    return 0;
  }
  return ($a_total < $b_total) ? 1 : -1;
}
